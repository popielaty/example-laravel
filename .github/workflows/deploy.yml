name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Deploy to:'
        required: true
        options: ['beta', 'dev1', 'dev2', 'dev3', 'dev4']

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment}}
    env:
      ssh_host: ${{ vars.SSH_HOST }}
      ssh_username: ${{ vars.SSH_USERNAME }}
      ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
      ovpn_client: ${{ secrets.OVPN_CLIENT }}
      ovpn_user_key_password: ${{ secrets.OVPN_USER_KEY_PASSWORD }}
      repo_host: ${{ vars.REPO_HOST || 'git@github.com' }}
      web_root_dir: ${{ vars.WEB_ROOT_DIR }}
      laravel_env: ${{ secrets.LARAVEL_ENV }}
    steps:
      - name: Validate required variables and secrets
        run: |
          if [ -z "${{ env.ssh_host }}" ]; then
            echo "Variable SSH_HOST is not set"
            exit 1
          fi
          if [ -z "${{ env.ssh_username }}" ]; then
            echo "Variable SSH_USERNAME is not set"
            exit 1
          fi
          if [ -z "${{ env.ssh_private_key }}" ]; then
            echo "Secret SSH_PRIVATE_KEY is not set"
            exit 1
          fi
          if [ -z "${{ env.ovpn_client }}" ]; then
            echo "Secret OVPN_CLIENT is not set"
            exit 1
          fi
          if [ -z "${{ env.ovpn_user_key_password }}" ]; then
            echo "Secret OVPN_USER_KEY_PASSWORD is not set"
            exit 1
          fi
          if [ -z "${{ env.web_root_dir }}" ]; then
            echo "Variable WEB_ROOT_DIR is not set"
            exit 1
          fi
          if [ -z "${{ env.laravel_env }}" ]; then
            echo "Secret LARAVEL_ENV is not set"
            exit 1
          fi
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set release dir
        run: echo "release_dir=${{ github.ref_name }}-$(date +'%Y%m%d%H%M')" >> ${GITHUB_ENV}
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved
      - name: Connect to VPN
        run: |
          echo "${{ env.ovpn_client }}" > config.ovpn
          echo "${{ env.ovpn_user_key_password }}" > vpn-key-pass.txt
          # sudo openvpn --config config.ovpn --askpass vpn-key-pass.txt --daemon --log openvpn.log --writepid openvpn.pid
          sudo openvpn --config config.ovpn --askpass vpn-key-pass.txt --daemon
          sleep 5
          echo "vpn_connected=true" >> $GITHUB_ENV
      - name: Add SSH host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.ssh_host }} >> ~/.ssh/known_hosts 2>/dev/null
      - name: Deploy
        uses: appleboy/ssh-action@v0.1.5
        env:
          HOME_DIR: /home/${{ env.ssh_username }}
          RELEASE_DIR: /home/${{ env.ssh_username }}/releases/${{ env.release_dir }}
          CURRENT_DIR: /home/${{ env.ssh_username }}/releases/current
          STORAGE_DIR: /home/${{ env.ssh_username }}/shared/storage
          WEB_ROOT_DIR: /home/${{ env.ssh_username }}/${{ env.web_root_dir }}
          REMOTE: ${{ env.repo_host }}:${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          LARAVEL_ENV: ${{ secrets.laravel_env }}
        with:
          host: ${{ env.ssh_host }}
          username: ${{ env.ssh_username }}
          key: ${{ env.ssh_private_key }}
          script_stop: true
          envs: HOME_DIR,RELEASE_DIR,CURRENT_DIR,STORAGE_DIR,WEB_ROOT_DIR,REMOTE,BRANCH,LARAVEL_ENV
          script: |

            # Create release directory and clone the repository
            mkdir -p $RELEASE_DIR
            cd $RELEASE_DIR
            git clone --branch $BRANCH $REMOTE .

            # Read .env.example content to .env
            cat .env.example > .env
            # Append the LARAVEL_ENV secret values
            echo "$LARAVEL_ENV" >> .env
            # Remove duplicate keys by keeping the last occurrence
            awk -F'=' '!seen[$1]++' .env > .env.tmp && mv .env.tmp .env

            # Remove release's storage directory and create a symlink to shared storage
            rm -fr storage
            ln -s $STORAGE_DIR storage

            # Install composer dependencies
            composer install --optimize-autoloader --no-dev

            # Run migrations
            php artisan migrate --force --no-interaction

            # Setup symlinks
            ln -nfs $RELEASE_DIR $CURRENT_DIR
            ln -nfs $CURRENT_DIR $WEB_ROOT_DIR

      - name: Disconnect from VPN
        if: always()
        run: |
          if [ -n "${{ env.vpn_connected }}" ]; then
            sudo killall openvpn
          fi
        continue-on-error: true
