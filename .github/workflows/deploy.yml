name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Deploy to:'
        required: true
        options: ['beta', 'dev1', 'dev2', 'dev3', 'dev4']

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      repo_host: ${{ vars.REPO_HOST || 'git@github.com' }}
      web_root_dir: ${{ vars.WEB_ROOT_DIR }}
      releases_to_keep: ${{ vars.RELEASES_TO_KEEP || 3 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Validate required variables and secrets for deploy
        run: |
          if [ -z "${{ env.repo_host }}" ]; then
            echo "Variable REPO_HOST is not set"
            exit 1
          fi
          if [ -z "${{ env.web_root_dir }}" ]; then
            echo "Variable WEB_ROOT_DIR is not set"
            exit 1
          fi
          if [ -z "${{ env.releases_to_keep }}" ]; then
            echo "Variable RELEASES_TO_KEEP is not set"
            exit 1
          fi
      - name: Validate whether given branch can be deployed to environment
        env:
          environments: ${{ secrets.ENVIRONMENTS }}
          current_environment: ${{ github.event.inputs.environment}}
        run: |
          deployable_branches=$(echo $environments | jq -r ".$current_environment.branches")
          if [[ $deployable_branches != "null" ]] && ! echo "$deployable_branches" | grep -q "\\b${{ github.ref_name }}\\b"; then
            echo "Branch ${{ github.ref_name }} is not allowed to be deployed to ${{ env.current_environment}}"
            exit 1
          fi
      - name: Resolve release dir
        run: |
          BRANCH_NAME=$(echo ${{ github.ref_name }} | tr '/' '-')
          echo "release_dir=$(date +'%Y%m%d%H%M')-$BRANCH_NAME" >> ${GITHUB_ENV}
      - name: Deploy to server
        uses: ./.github/actions/vpn-ssh-action
        env:
          RELEASES_DIR: /home/${{ vars.ssh_username }}/releases
          RELEASE_DIR: /home/${{ vars.ssh_username }}/releases/${{ env.release_dir }}
          CURRENT_DIR: /home/${{ vars.ssh_username }}/releases/current
          STORAGE_DIR: /home/${{ vars.ssh_username }}/shared/storage
          HELPER_SCRIPT: /home/${{ vars.ssh_username }}/shared/helper.sh
          ENV_FILE_PATH: /home/${{ vars.ssh_username }}/shared/.env
          WEB_ROOT_DIR: /home/${{ vars.ssh_username }}/${{ vars.web_root_dir }}
          REMOTE: ${{ env.repo_host }}:${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          LARAVEL_ENV: ${{ env.laravel_env }}
          RELEASES_TO_KEEP: ${{ env.releases_to_keep }}
          ENVIRONMENTS: ${{ secrets.ENVIRONMENTS }}
        with:
          current_environment: ${{ github.event.inputs.environment}}
          ssh_username: ${{ vars.SSH_USERNAME }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          ovpn_client: ${{ secrets.OVPN_CLIENT }}
          ovpn_user_key_password: ${{ secrets.OVPN_USER_KEY_PASSWORD }}
          envs: RELEASES_DIR,RELEASE_DIR,ENV_FILE_PATH,CURRENT_DIR,STORAGE_DIR,HELPER_SCRIPT,WEB_ROOT_DIR,REMOTE,BRANCH,LARAVEL_ENV,RELEASES_TO_KEEP
          action_script: |
            # Create release directory and clone the repository
            mkdir -p $RELEASE_DIR
            cd $RELEASE_DIR
            git clone --branch $BRANCH $REMOTE .

            # create symlink to shared .env file
            ln -s $ENV_FILE_PATH .env

            # Remove release's storage directory and create a symlink to shared storage
            rm -fr storage
            ln -s $STORAGE_DIR storage

            # Install composer dependencies
            composer install --optimize-autoloader --no-dev

            # Run migrations
            chmod +x $HELPER_SCRIPT
            source $HELPER_SCRIPT
            latest_release=$(realpath $CURRENT_DIR)
            rollback $latest_release $RELEASE_DIR
            migrate $RELEASE_DIR
            # rm $HELPER_SCRIPT

            # Setup symlinks
            ln -nfs $RELEASE_DIR $CURRENT_DIR
            ln -nfs $CURRENT_DIR $WEB_ROOT_DIR
          on_success_script: |
            # Leave only the last RELEASES_TO_KEEP releases
            let "RELEASES_TO_KEEP++"
            cd $RELEASES_DIR
            find . -maxdepth 1 -type d ! -path . -exec stat --format="%n" {} + | sort -r | tail -n +$RELEASES_TO_KEEP | xargs rm -fr
          on_failure_script: rm -fr $RELEASE_DIR
