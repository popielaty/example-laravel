name: "SSH over VPN action"
description: "Perform an action on remote server using SSH and OpenVPN"
inputs:
  current_environment:
    description: 'Current environment'
    required: true
  ssh_username:
    description: 'SSH username'
    required: true
  ssh_private_key:
    description: 'SSH private key'
    required: true
  ovpn_client:
    description: 'OpenVPN client configuration'
    required: true
  ovpn_user_key_password:
    description: 'OpenVPN user key password'
    required: true
  envs:
    description: 'Environment variables for shell scripts'
  action_script:
    description: 'Action script to run'
    required: true
  on_success_script:
    description: 'Script to run on success of main action'
    required: false
  on_failure_script:
    description: 'Script to run on failure of main action'
    required: false

runs:
  using: "composite"
  steps:
    - name: Validate required variables and secrets
      run: |
        if [ -z "${{ inputs.current_environment }}" ]; then
          echo "Current environment is not set"
          exit 1
        fi
        if [ -z "${{ inputs.ssh_username }}" ]; then
          echo "Variable SSH_USERNAME is not set"
          exit 1
        fi
        if [ -z "${{ inputs.ssh_private_key }}" ]; then
          echo "Secret SSH_PRIVATE_KEY is not set"
          exit 1
        fi
        if [ -z "${{ inputs.ovpn_client }}" ]; then
          echo "Secret OVPN_CLIENT is not set"
          exit 1
        fi
        if [ -z "${{ inputs.ovpn_user_key_password }}" ]; then
          echo "Secret OVPN_USER_KEY_PASSWORD is not set"
          exit 1
        fi
        if [ -z "$ENVIRONMENTS" ]; then
          echo "Secret ENVIRONMENTS is not set or passed to SSH over VPN action"
          exit 1
        fi
        if ! echo "$ENVIRONMENTS" | jq empty &> /dev/null; then
          echo "Secret ENVIRONMENTS does not contain valid JSON"
          exit 1
        fi
        if [[ $(echo $ENVIRONMENTS | jq -r ".${{ inputs.current_environment }}") == 'null' ]]; then
          echo "No settings for ${{ inputs.current_environment }} in ENVIRONMENTS secret"
          exit 1
        fi
      shell: bash
    - name: Check user's access to environment
      env:
        current_environment: ${{ inputs.current_environment }}
      run: |
        if [[ $(echo $ENVIRONMENTS | jq -r ".$current_environment.authorized_users") == "null" ]]; then
          echo "authorized_users array for $current_environment is not set in ENVIRONMENTS secret"
          exit 1
        fi

        authorized_users=$(echo $ENVIRONMENTS | jq -r ".$current_environment.authorized_users[]")
        if ! echo "$authorized_users" | grep -q "\\b$GITHUB_ACTOR\\b"; then
          echo "User $GITHUB_ACTOR is not authorized to act on $current_environment"
          exit 1
        fi
      shell: bash
    - name: Resolve ssh_host
      env:
        current_environment: ${{ inputs.current_environment }}
      run: |
        ssh_host=$(echo $ENVIRONMENTS | jq -r ".$current_environment.ssh_host")
        if [[ "$ssh_host" == "null" ]]; then
          echo "ssh_host for $current_environment is not set in ENVIRONMENTS secret"
          exit 1
        fi
        echo "ssh_host=$ssh_host" >> $GITHUB_ENV
      shell: bash
    - name: Install OpenVPN
      run: |
        sudo apt update
        sudo apt install -y openvpn openvpn-systemd-resolved
      shell: bash
    - name: Connect to VPN
      run: |
        echo "${{ inputs.ovpn_client }}" > config.ovpn
        echo "${{ inputs.ovpn_user_key_password }}" > vpn-key-pass.txt
        sudo openvpn --config config.ovpn --askpass vpn-key-pass.txt --daemon
        sleep 5
        if ! curl -s -m 5 ${{ env.ssh_host }} > /dev/null; then
          echo "Failed establishing VPN connection to ${{ env.ssh_host }}"
          exit 1
        fi
        echo "vpn_connected=true" >> $GITHUB_ENV
      shell: bash
    - name: Add SSH host to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.ssh_host }} >> ~/.ssh/known_hosts 2>/dev/null
      shell: bash
    - name: Run action script
      id: action_script
      uses: appleboy/ssh-action@v0.1.5
      continue-on-error: true
      with:
        host: ${{ env.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        script_stop: true
        envs: ${{ inputs.envs }}
        script: ${{ inputs.action_script }}
    - name: Run post-action script on success
      if: steps.action_script.outcome == 'success' && inputs.on_success_script
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ env.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        script_stop: true
        envs: ${{ inputs.envs }}
        script: ${{ inputs.on_success_script }}
    - name: Run post-action script on failure
      if: steps.action_script.outcome == 'failure' && inputs.on_failure_script
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ env.ssh_host }}
        username: ${{ inputs.ssh_username }}
        key: ${{ inputs.ssh_private_key }}
        script_stop: true
        envs: ${{ inputs.envs }}
        script: ${{ inputs.on_failure_script }}
    - name: Disconnect from VPN
      if: always()
      run: |
        if [ -n "${{ env.vpn_connected }}" ]; then
          sudo killall openvpn
        fi
      shell: bash
      continue-on-error: true
